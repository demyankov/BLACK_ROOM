{"version":3,"sources":["app/create_tag.js","app/additional.js","app/display.js","app/app.js"],"names":["createTag","tagName","className","text","tag","document","createElement","classList","add","innerText","createInput","type","setAttribute","createButton","appendTag","i","arguments","length","append","calcCountTasksInToDo","cards","filter","el","status","active","calcCountTasksInProgress","calcCountTasksInDone","setCountOfCards","querySelector","getDate","dayNow","monthNow","dateNow","Date","getMonth","getFullYear","getTime","hoursNow","minutesNow","timeNow","getMinutes","getHours","users","displayTime","getCardData","card","title","description","user","fetch","then","response","json","data","createListOfUsers","fillingFormCard","catch","err","alert","setInterval","todoWrapper","inProgressWrapper","doneWrapper","selectUsers","innerHTML","forEach","option","name","renderTodo","cardsToDo","form","id","taskBtn","btnEdit","btnDelete","taskTitle","taskDescription","taskUser","taskDate","btnToProgress","fillingCard","messageIfEmpty","renderInProgress","cardsInProgress","btnBack","btnComplete","renderDone","cardsDone","date","date_to_progress","date_to_done","value","closeEditForm","cardFormWrapper","toggle","boardDisplay","board","closest","boardId","todoHeader","inProgressHeader","doneHeader","deletedCard","addOrEdit","editCard","idEditCard","setLocalStorage","cardsArray","idCounter","localStorage","setItem","JSON","stringify","createObject","getItem","parse","addEventListener","boardWrapper","cardForm","confirmBtn","cancelTodoBtn","warningWrapper","confirmWarningBtn","cancelWarningBtn","addNewCard","getCardFormData","push","inListenerEditCard","getAttribute","titleTag","descriptionTag","userTag","inListenerDeleteCard","parentClass","deletedCardId","date_deleted","inListenerToProgress","toProgressCardId","inListenerToTodo","toTodoCardId","date_to_todo","inListenerToDone","toDoneCardId","editingCard","date_edit","e","target","includes","event","hidden"],"mappings":"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","file":"app.5bbd27a2.js","sourceRoot":"..\\src","sourcesContent":["export function createTag (tagName, className, text){\r\n    let tag = document.createElement(tagName)\r\n    className ? tag.classList.add(className):null\r\n    text ? tag.innerText = text:null\r\n    return tag\r\n}\r\n\r\nexport function createInput (className, type, text){\r\n    let tag = document.createElement('input')\r\n    className ? tag.classList.add(className):null\r\n    type ? tag.setAttribute ('type', type):tag.setAttribute ('type', 'text')\r\n    text ? tag.setAttribute ('placeholder', text):null \r\n    return tag\r\n}\r\n\r\n// export function createTextArea (className, type, text){\r\n//     let tag = document.createElement('textarea')\r\n//     className ? tag.classList.add(className):null\r\n//     type ? tag.setAttribute ('type', type):tag.setAttribute ('type', 'text')\r\n//     text ? tag.setAttribute ('placeholder', text):null \r\n//     return tag\r\n// }\r\n\r\nexport function createButton (className, type, text){\r\n    let tag = document.createElement('button')\r\n    className ? tag.classList.add(className):null\r\n    type ? tag.setAttribute ('type', type):tag.setAttribute ('type', 'button')\r\n    text ? tag.innerText =text:null    \r\n    return tag\r\n}\r\n\r\n\r\nexport function appendTag () {\r\n    for (let i =1; i<arguments.length;i++) {\r\n        arguments[0].append(arguments[i])  \r\n    };      \r\n}","import { cards } from \"./app.js\";\r\n\r\n//количество карточек в TODO\r\nfunction calcCountTasksInToDo() {\r\n  return cards.filter((el) => {\r\n    return el.status == \"todo\" && el.active == \"true\";\r\n  }).length;\r\n}\r\n\r\n//количество карточек в INPROGRESS\r\nexport function calcCountTasksInProgress() {\r\n  return cards.filter((el) => {\r\n    return el.status == \"in_progress\" && el.active == \"true\";\r\n  }).length;\r\n}\r\n\r\n//количество карточек в DONE\r\nfunction calcCountTasksInDone() {\r\n  return cards.filter((el) => {\r\n    return el.status == \"done\" && el.active == \"true\";\r\n  }).length;\r\n}\r\n\r\nexport function setCountOfCards() {\r\n  document.querySelector(\"#count_todo\").innerText = calcCountTasksInToDo();\r\n  document.querySelector(\"#count_in-progress\").innerText =\r\n    calcCountTasksInProgress();\r\n  document.querySelector(\"#count_done\").innerText = calcCountTasksInDone();\r\n}\r\n\r\n//формирование текущей даты\r\nexport function getDate() {\r\n  let dateNow = new Date();\r\n  let dayNow;\r\n  let monthNow;\r\n  dateNow.getDate() < 10\r\n    ? (dayNow = `0${dateNow.getDate()}`)\r\n    : (dayNow = dateNow.getDate());\r\n  dateNow.getMonth() < 9\r\n    ? (monthNow = `0${dateNow.getMonth() + 1}`)\r\n    : (monthNow = dateNow.getMonth() + 1);\r\n  return `${dayNow}.${monthNow}.${dateNow.getFullYear()}`;\r\n}\r\n\r\n//формирование текущего времени\r\nexport function getTime() {\r\n  let timeNow = new Date();\r\n  let hoursNow;\r\n  let minutesNow;\r\n  timeNow.getMinutes() < 10\r\n    ? (minutesNow = `0${timeNow.getMinutes()}`)\r\n    : (minutesNow = timeNow.getMinutes());\r\n  timeNow.getHours() < 9\r\n    ? (hoursNow = `0${timeNow.getHours()}`)\r\n    : (hoursNow = timeNow.getHours());\r\n  return `${hoursNow}:${minutesNow}`;\r\n}\r\n","import { createTag, createButton, appendTag } from \"./create_tag.js\";\r\nimport { setCountOfCards, getTime } from \"./additional.js\";\r\nimport { cards, cardFormWrapper, cardForm } from \"./app.js\";\r\n\r\n//отображение текущего времени в header\r\nexport function displayTime(getTime) {\r\n  document.querySelector(\".header__time\").innerText = getTime();\r\n}\r\n\r\n//обновление текущего времени в header\r\nsetInterval(() => displayTime(getTime), 1000);\r\n\r\nlet users;\r\nexport function getCardData(card, title, description, user) {\r\n  //запрашиваем массив пользователей\r\n  users = fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      createListOfUsers(data); // добавляем пользователей в список формы добавления/редактирования карточки\r\n      fillingFormCard(card, title, description, user); // заполнение редактируемой карточки данными\r\n    })\r\n    .catch((err) => alert(err));\r\n}\r\n\r\nexport let todoWrapper = document.querySelector(\".board__task-wrapper\"); //контейнер для карточек TODO\r\nexport let inProgressWrapper = document.querySelector(\".in-progress-wrapper\"); //контейнер для карточек INPROGRESS\r\nlet doneWrapper = document.querySelector(\".done-wrapper\"); //контейнер для карточек DONE\r\n\r\n//добавляем пользователей в список формы добавления/редактирования карточки\r\nfunction createListOfUsers(users) {\r\n  let selectUsers = document.querySelector(\".task__edit-user\");\r\n  selectUsers.innerHTML = \"\";\r\n  users.forEach((user) => {\r\n    let option = createTag(\"option\", \"user\", user.name);\r\n    option.innerText = user.name;\r\n    appendTag(selectUsers, option);\r\n  });\r\n}\r\n\r\n//рендер формы на доске TODO\r\nexport function renderTodo() {\r\n  let cardsToDo = cards.filter(\r\n    (el) => el.status === \"todo\" && el.active === \"true\"\r\n  );\r\n  todoWrapper.innerHTML = \"\";\r\n  cardsToDo.forEach((card) => {\r\n    let form = createTag(\"form\", \"task_to-do\");\r\n    form.classList.add(\"task\");\r\n    form.setAttribute(\"data-id\", card.id); //присваиваем форме data-id\r\n    let taskBtn = createTag(\"div\", \"task__btn\");\r\n    let btnEdit = createButton(\"task__btn-edit\", \"\", \"Edit\");\r\n    btnEdit.classList.add(\"btn\");\r\n    let btnDelete = createButton(\"task__btn-delete\", \"\", \"Delete\");\r\n    btnDelete.classList.add(\"btn\");\r\n    let taskTitle = createTag(\"p\", \"task__title\", \"Title\");\r\n    let taskDescription = createTag(\"p\", \"task__description\", \"Description\");\r\n    let taskUser = createTag(\"p\", \"task__user\", \"User\");\r\n    let taskDate = createTag(\"date\", \"task__date\", \"Date\");\r\n    let btnToProgress = createButton(\"to-progress\");\r\n\r\n    fillingCard(\"todo\", card, taskTitle, taskDescription, taskUser, taskDate); //заполнение данных карточки\r\n\r\n    appendTag(taskBtn, btnEdit, btnDelete);\r\n    appendTag(\r\n      form,\r\n      taskBtn,\r\n      taskTitle,\r\n      taskDescription,\r\n      taskUser,\r\n      taskDate,\r\n      btnToProgress\r\n    );\r\n    appendTag(todoWrapper, form);\r\n  });\r\n\r\n  if (cardsToDo.length === 0) {\r\n    let messageIfEmpty = createTag(\r\n      \"p\",\r\n      \"empty-message\",\r\n      \"Currently there are no tasks to do\"\r\n    );\r\n    appendTag(todoWrapper, messageIfEmpty);\r\n  }\r\n}\r\n\r\n//рендер формы на доске INPROGRESS\r\nexport function renderInProgress() {\r\n  let cardsInProgress = cards.filter(\r\n    (el) => el.status === \"in_progress\" && el.active === \"true\"\r\n  );\r\n  inProgressWrapper.innerHTML = \"\";\r\n  cardsInProgress.forEach((card) => {\r\n    let form = createTag(\"form\", \"in-progress\");\r\n    form.classList.add(\"task\");\r\n    form.setAttribute(\"data-id\", card.id); //присваиваем форме data-id\r\n    let taskBtn = createTag(\"div\", \"task__btn\");\r\n    let btnBack = createButton(\"task__btn-back\", \"\", \"Back\");\r\n    btnBack.classList.add(\"btn\");\r\n    let btnComplete = createButton(\"task__btn-complete\", \"\", \"Complete\");\r\n    btnComplete.classList.add(\"btn\");\r\n    let taskTitle = createTag(\"p\", \"task__title\", \"Title\");\r\n    let taskDescription = createTag(\"p\", \"task__description\", \"Description\");\r\n    let taskUser = createTag(\"p\", \"task__user\", \"User\");\r\n    let taskDate = createTag(\"date\", \"task__date\", \"Date\");\r\n\r\n    fillingCard(\r\n      \"in_progress\",\r\n      card,\r\n      taskTitle,\r\n      taskDescription,\r\n      taskUser,\r\n      taskDate\r\n    ); //заполнение данных карточки\r\n\r\n    appendTag(taskBtn, btnBack, btnComplete);\r\n    appendTag(form, taskBtn, taskTitle, taskDescription, taskUser, taskDate);\r\n    appendTag(inProgressWrapper, form);\r\n  });\r\n\r\n  if (cardsInProgress.length === 0) {\r\n    let messageIfEmpty = createTag(\r\n      \"p\",\r\n      \"empty-message\",\r\n      \"Currently there are no tasks in progress\"\r\n    );\r\n    appendTag(inProgressWrapper, messageIfEmpty);\r\n  }\r\n}\r\n\r\n//рендер формы на доске DONE\r\nexport function renderDone() {\r\n  let cardsDone = cards.filter(\r\n    (el) => el.status === \"done\" && el.active === \"true\"\r\n  );\r\n  doneWrapper.innerHTML = \"\";\r\n  cardsDone.forEach((card) => {\r\n    let form = createTag(\"form\", \"task_done\");\r\n    form.classList.add(\"task\");\r\n    form.setAttribute(\"data-id\", card.id); //присваиваем форме data-id\r\n    let taskBtn = createTag(\"div\", \"task__btn\");\r\n    let btnDelete = createButton(\"task__btn-delete\", \"\", \"Delete\");\r\n    btnDelete.classList.add(\"btn\");\r\n    let taskTitle = createTag(\"p\", \"task__title\", \"Title\");\r\n    let taskDescription = createTag(\"p\", \"task__description\", \"Description\");\r\n    let taskUser = createTag(\"p\", \"task__user\", \"User\");\r\n    let taskDate = createTag(\"date\", \"task__date\", \"Date\");\r\n\r\n    fillingCard(\"done\", card, taskTitle, taskDescription, taskUser, taskDate); //заполнение данных карточки\r\n\r\n    appendTag(taskBtn, btnDelete);\r\n    appendTag(form, taskBtn, taskTitle, taskDescription, taskUser, taskDate);\r\n    appendTag(doneWrapper, form);\r\n  });\r\n\r\n  if (cardsDone.length === 0) {\r\n    let messageIfEmpty = createTag(\r\n      \"p\",\r\n      \"empty-message\",\r\n      \"Currently there are no done tasks\"\r\n    );\r\n    appendTag(doneWrapper, messageIfEmpty);\r\n  }\r\n}\r\n\r\n//наполнение карточек данными\r\nexport function fillingCard() {\r\n  let [status, card, taskTitle, taskDescription, taskUser, taskDate] =\r\n    arguments;\r\n  taskTitle ? (taskTitle.innerText = card.title) : null;\r\n  taskDescription ? (taskDescription.innerText = card.description) : null;\r\n  taskUser ? (taskUser.innerText = card.user) : null;\r\n\r\n  status === \"todo\" && taskDate ? (taskDate.innerText = card.date) : null;\r\n  status === \"in_progress\" && taskDate\r\n    ? (taskDate.innerText = card.date_to_progress)\r\n    : null;\r\n  status === \"done\" && taskDate\r\n    ? (taskDate.innerText = card.date_to_done)\r\n    : null;\r\n\r\n  setCountOfCards();\r\n}\r\n\r\n//наполнение формы изменения карточки данными\r\nfunction fillingFormCard() {\r\n  let [card, taskTitle, taskDescription, taskUser] = arguments;\r\n  taskTitle ? (taskTitle.value = card.title) : null;\r\n  taskDescription ? (taskDescription.value = card.description) : null;\r\n  taskUser ? (taskUser.value = card.user) : null;\r\n}\r\n\r\n//закрытие формы добавления/изменения карточек\r\nexport function closeEditForm() {\r\n  cardFormWrapper.classList.toggle(\"overlay-active\");\r\n  let form = document.querySelector(\".task__edit\");\r\n  form.querySelector(\".task__edit-title\").value = \"\";\r\n  form.querySelector(\".task__edit-description\").value = \"\";\r\n}\r\n\r\n//функция сворачивания/разворачивания досок\r\nexport function boardDisplay(el) {\r\n  let board = el.closest(\".board\");\r\n  let boardId = board.id;\r\n  let todoHeader = document.querySelector(\"#todo-header\"); // header доски todo\r\n  let inProgressHeader = document.querySelector(\"#in-progress-header\"); // header доски in-progress\r\n  let doneHeader = document.querySelector(\"#done-header\"); // header доски done\r\n\r\n  boardId !== \"board_todo\"\r\n    ? todoHeader.closest(\".board\").classList.add(\"task-hidden\")\r\n    : null;\r\n  boardId !== \"board_in-progress\"\r\n    ? inProgressHeader.closest(\".board\").classList.add(\"task-hidden\")\r\n    : null;\r\n  boardId !== \"board_done\"\r\n    ? doneHeader.closest(\".board\").classList.add(\"task-hidden\")\r\n    : null;\r\n  board.classList.toggle(\"task-hidden\");\r\n}\r\n","import {\r\n  renderTodo,\r\n  renderInProgress,\r\n  renderDone,\r\n  todoWrapper,\r\n  getCardData,\r\n  inProgressWrapper,\r\n  displayTime,\r\n  boardDisplay,\r\n  closeEditForm,\r\n} from \"./display.js\";\r\n\r\nimport {\r\n  setCountOfCards,\r\n  calcCountTasksInProgress,\r\n  getTime,\r\n  getDate,\r\n} from \"./additional.js\";\r\n\r\nexport let cards; // массив объектов карточек\r\nlet id; // четчик уникальных id\r\nlet deletedCard; //маркер, в который записывается объект кнопки удаления карточки для дальнейшего определения по какой доске был клик и где нужно удатиль карточку\r\nlet addOrEdit; //маркер, который показывает пользователь добавляет новую карточку или редактирует существующую\r\nlet editCard; // редактируемая форма\r\nlet idEditCard; // data-id редактируемой формы\r\nlet title; // содержание заголовка в форме добавления/редактирования карточки\r\nlet description; // содержание описания задачи в форме добавления/редактирования карточки\r\nlet user; // выбранный пользователь в форме добавления/редактирования карточки\r\n\r\n//достаем из localstorage счетчик id и массив карточек\r\nlocalStorage.getItem(\"id\") ? (id = localStorage.getItem(\"id\")) : (id = 0);\r\nlocalStorage.getItem(\"cards\")\r\n  ? (cards = JSON.parse(localStorage.getItem(\"cards\")))\r\n  : (cards = []);\r\n\r\n//запись в localstorage счетчика id и массива карточек\r\nfunction setLocalStorage(cardsArray, idCounter) {\r\n  cardsArray ? localStorage.setItem(\"cards\", JSON.stringify(cardsArray)) : null;\r\n  idCounter ? localStorage.setItem(\"id\", idCounter) : null;\r\n}\r\n\r\n//объект карточки\r\nexport function createObject() {\r\n  let [id, title, description, user, date] = arguments;\r\n  let task = {\r\n    id: id,\r\n    title: title,\r\n    description: description,\r\n    user: user,\r\n    date: date,\r\n    status: \"todo\", //inprogress, done\r\n    active: \"true\", //false - если карточка была удалена\r\n  };\r\n  return task;\r\n}\r\n\r\ndocument.addEventListener(\r\n  \"DOMContentLoaded\",\r\n  function () {\r\n    displayTime(getTime);\r\n    renderTodo();\r\n    renderInProgress();\r\n    renderDone();\r\n  },\r\n  false\r\n);\r\n\r\nlet boardWrapper = document.querySelector(\".board-wrapper\"); // контейнер всех досок\r\nlet doneWrapper = document.querySelector(\".done-wrapper\"); // контейнер Доски done\r\nexport let cardFormWrapper = document.querySelector(\".overlay\"); // контейнер пустого шаблона новой/редактирования карточки\r\nexport let cardForm = document.querySelector(\".task__edit\"); //шаблон новой/редактируемой карточки\r\nlet confirmBtn = document.querySelector(\".task__edit-confirm\"); //кнопка confirm в шаблоне для подтверждения добавления/изменения карточки\r\nlet cancelTodoBtn = document.querySelector(\".task__edit-cancel\"); //кнопка cancel для закрытия шаблона добавления/изменения карточки\r\nlet warningWrapper = document.querySelector(\".overlay-warning\"); //контейнер формы Warning\r\nlet confirmWarningBtn = document.querySelector(\".warning__confirm\"); //кнопка в форме Warning для подтверждения действий (удаления карточек)\r\nlet cancelWarningBtn = document.querySelector(\".warning__cancel\"); //кнопка cancel в форме Warning\r\n\r\nboardWrapper.addEventListener(\"click\", (e) => {\r\n  let el = e.target;\r\n\r\n  //сворачивание/разворачивание доски\r\n  el.className.includes(\"board__header\") ? boardDisplay(el) : null;\r\n\r\n  //прослушка на кнопку добавления новой карточки\r\n  if (el.className.includes(\"board__add-todo\")) {\r\n    addOrEdit = \"add\"; //устанавливаем флаг в состояние add\r\n    getCardData(); //получаем список пользователей и добавляем в шаблон новой карточки\r\n    cardFormWrapper.classList.toggle(\"overlay-active\"); //добавляем класс для отображения формы редактировния карточки\r\n  }\r\n\r\n  //прослушка на кнопку удаления всех выполненных карточек (вызов формы warning)\r\n  if (el.className.includes(\"board__delete-all\")) {\r\n    warningWrapper.classList.toggle(\"warning-active\");\r\n    document.querySelector(\".warning__text-description\").innerText =\r\n      \"Do you want to delete all tasks?\";\r\n    deletedCard = el;\r\n  }\r\n});\r\n\r\n//прослушка на кнопку Confirm в форме добавления/редактирования карточки для добавления изменений в массив\r\nconfirmBtn.addEventListener(\"click\", () => {\r\n  addOrEdit === \"add\" ? addNewCard() : null; //вызоваем функцию добавления в массив объекта новой карточки\r\n  addOrEdit === \"edit\" ? editingCard() : null; //вызоваем функцию редактирования объекта карточки\r\n  renderTodo();\r\n});\r\n\r\n//Функция добавления в массив объекта новой карточки\r\nfunction addNewCard() {\r\n  getCardFormData(cardForm);\r\n  if (title && description) {\r\n    id++; //инкрементируем счетчик\r\n    let date = getDate();\r\n    let card = createObject(id, title, description, user, date);\r\n    cards.push(card);\r\n    setLocalStorage(cards, id);\r\n    closeEditForm();\r\n  }\r\n}\r\n\r\n// прослушка на контейнер TODO\r\ntodoWrapper.addEventListener(\"click\", (event) => {\r\n  let el = event.target;\r\n\r\n  //прослушка на кнопку редактирования карточки\r\n  if (el.className.includes(\"task__btn-edit\")) {\r\n    inListenerEditCard(el);\r\n  }\r\n\r\n  //прослушка на кнопку удаления карточки из доски ToDo\r\n  if (el.className.includes(\"task__btn-delete\")) {\r\n    warningWrapper.classList.toggle(\"warning-active\"); //открываем окно с предупреждением\r\n    document.querySelector(\".warning__text-description\").innerText =\r\n      \"Do you want to delete the current task?\";\r\n    deletedCard = el; //маркер, с помощью которго определяется какая карточка удаляется\r\n  }\r\n\r\n  //прослушка на кнопку перемещения карточки из TODO в IN-PROGRESS\r\n  if (el.className.includes(\"to-progress\")) {\r\n    let countTasksInProgress = calcCountTasksInProgress(); // находим количество карточек In_progress\r\n    if (countTasksInProgress < 6) {\r\n      inListenerToProgress(el);\r\n      setLocalStorage(cards);\r\n      renderTodo();\r\n      renderInProgress();\r\n    } else {\r\n      warningWrapper.classList.toggle(\"warning-active\"); //открываем окно с предупреждением\r\n      document.querySelector(\".warning__confirm\").hidden = true; //скрываем кнопку Confirm в форме Warning\r\n      document.querySelector(\".warning__text-description\").innerText =\r\n        \"There are many tasks in progress. Complete the task and try again\";\r\n    }\r\n  }\r\n});\r\n\r\n// функция определения заголовка, описания и исполнителя В ФОРМЕ добавляемой/редактируемой задачи (карточки)\r\nfunction getCardFormData() {\r\n  title = cardForm.querySelector(\".task__edit-title\").value;\r\n  description = cardForm.querySelector(\".task__edit-description\").value;\r\n  user = cardForm.querySelector(\".task__edit-user\").value;\r\n}\r\n\r\nfunction inListenerEditCard(el) {\r\n  addOrEdit = \"edit\";\r\n  editCard = el.closest(\".task_to-do\");\r\n  idEditCard = editCard.getAttribute(\"data-id\"); // data-id редактируемой формы\r\n\r\n  let titleTag = cardForm.querySelector(\".task__edit-title\");\r\n  let descriptionTag = cardForm.querySelector(\".task__edit-description\");\r\n  let userTag = cardForm.querySelector(\".task__edit-user\");\r\n  cards.forEach((card) => {\r\n    if (card.id == idEditCard) {\r\n      getCardData(card, titleTag, descriptionTag, userTag); //получаем список пользователей, заполняем форму данными редактируемой карточки\r\n      cardFormWrapper.classList.toggle(\"overlay-active\"); //добавляем класс для отображения формы редактировния карточки\r\n    }\r\n  });\r\n}\r\n\r\n//'удаляем' карточку из массива (устанавливаем флаг active=false)\r\nfunction inListenerDeleteCard(el, parentClass) {\r\n  let deletedCardId = el.closest(parentClass).getAttribute(\"data-id\");\r\n  cards.forEach((card) => {\r\n    if (card.id == deletedCardId) {\r\n      card.active = \"false\";\r\n      card.date_deleted = getDate();\r\n    }\r\n  });\r\n}\r\n\r\n//прослушка на кнопку перемещения карточки из IN-PROGRESS в TODO и в Done\r\ninProgressWrapper.addEventListener(\"click\", (e) => {\r\n  let el = e.target;\r\n  //  из IN-PROGRESS в TODO\r\n  el.className.includes(\"task__btn-back\") ? inListenerToTodo(el) : null;\r\n  // из IN-PROGRESS в Done\r\n  el.className.includes(\"task__btn-complete\") ? inListenerToDone(el) : null;\r\n\r\n  setLocalStorage(cards); //записываем в localStorage измененный массив карточек\r\n  renderTodo();\r\n  renderInProgress();\r\n  renderDone();\r\n});\r\n\r\n//'перемещаем' карточку из todo в in_progress (устанавливаем флаг status = in_progress)\r\nfunction inListenerToProgress(el) {\r\n  let toProgressCardId = el.closest(\".task_to-do\").getAttribute(\"data-id\");\r\n\r\n  cards.forEach((card) => {\r\n    if (card.id == toProgressCardId) {\r\n      card.status = \"in_progress\";\r\n      card.date_to_progress = getDate();\r\n    }\r\n  });\r\n}\r\n\r\n//'перемещаем' карточку из In-progress в Todo в  (устанавливаем флаг status = todo)\r\nfunction inListenerToTodo(el) {\r\n  let toTodoCardId = el.closest(\".in-progress\").getAttribute(\"data-id\");\r\n  cards.forEach((card) => {\r\n    if (card.id == toTodoCardId) {\r\n      card.status = \"todo\";\r\n      card.date_to_todo = getDate();\r\n    }\r\n  });\r\n}\r\n\r\n//'перемещаем' карточку из todo в Done (устанавливаем флаг status = done)\r\nfunction inListenerToDone(el) {\r\n  let toDoneCardId = el.closest(\".in-progress\").getAttribute(\"data-id\");\r\n  cards.forEach((card) => {\r\n    if (card.id == toDoneCardId) {\r\n      card.status = \"done\";\r\n      card.date_to_done = getDate();\r\n    }\r\n  });\r\n}\r\n\r\n//Функция редактирования карточки\r\nfunction editingCard() {\r\n  getCardFormData(editCard); //получаем данные из редактируемой карточки\r\n  let date = getDate();\r\n  if (title && description) {\r\n    cards.forEach((card) => {\r\n      if (card.id == idEditCard) {\r\n        card.title = title;\r\n        card.description = description;\r\n        card.user = user;\r\n        card.date_edit = date;\r\n        setLocalStorage(cards); //загружаем в localStorage измененный массив\r\n        closeEditForm(); //закрываем форму\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n//Закрытие формы для добавления новой карточки или редактирования старой при нажатии кнопки Cancel\r\ncancelTodoBtn.addEventListener(\"click\", () => {\r\n  closeEditForm();\r\n});\r\n\r\n//прослушка на кнопку удаления карточки из доски DONe\r\ndoneWrapper.addEventListener(\"click\", (event) => {\r\n  let el = event.target;\r\n  deletedCard = el;\r\n  if (el.className.includes(\"task__btn-delete\")) {\r\n    warningWrapper.classList.toggle(\"warning-active\"); //открываем окно с предупреждением\r\n    document.querySelector(\".warning__text-description\").innerText =\r\n      \"Do you want to delete the current task?\";\r\n  }\r\n});\r\n\r\n//функция вызова прослушки на кнопку confirm с указанием, где происходит удаление карточек\r\nconfirmWarningBtn.addEventListener(\"click\", () => {\r\n  warningWrapper.classList.toggle(\"warning-active\"); //закрываем окно с предупреждением\r\n  //если происходит удаление карточек на доске Done\r\n  if (deletedCard.closest(\".task_done\")) {\r\n    inListenerDeleteCard(deletedCard, \".task_done\");\r\n    setLocalStorage(cards);\r\n    renderDone();\r\n  }\r\n  //если происходит удаление карточек на доске Todo\r\n  if (deletedCard.closest(\".task_to-do\")) {\r\n    inListenerDeleteCard(deletedCard, \".task_to-do\");\r\n    setLocalStorage(cards);\r\n    renderTodo();\r\n  }\r\n\r\n  //если происходит удаление всех карточек\r\n  if (deletedCard.className.includes(\"board__delete-all\")) {\r\n    cards = [];\r\n    setLocalStorage(cards);\r\n    renderTodo();\r\n    renderInProgress();\r\n    renderDone();\r\n    setCountOfCards();\r\n  }\r\n});\r\n\r\n//закрытие формы warning при нажатии кнопки Cancel\r\ncancelWarningBtn.addEventListener(\"click\", () => {\r\n  warningWrapper.classList.toggle(\"warning-active\");\r\n  document.querySelector(\".warning__confirm\").hidden = false;\r\n});\r\n"]}